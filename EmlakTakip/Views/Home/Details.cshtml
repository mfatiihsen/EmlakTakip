@model EmlakTakip.Models.Emlak
@using Newtonsoft.Json

@{
    ViewData["Title"] = Model.Baslik;
}

<style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --dark-color: #1b263b;
        --light-color: #f8f9fa;
    }

    .property-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 15px;
    }

    .property-header {
        margin-bottom: 2rem;
    }

    .property-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
    }

    .property-price {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 1rem;
    }

    .property-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6c757d;
    }

    .gallery-container {
        position: relative;
        margin-bottom: 2rem;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .main-image {
        width: 100%;
        height: 500px;
        object-fit: cover;
        cursor: pointer;
    }

    .gallery-nav {
        position: absolute;
        top: 50%;
        width: 100%;
        display: flex;
        justify-content: space-between;
        padding: 0 1rem;
        transform: translateY(-50%);
    }

    .nav-btn {
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .nav-btn:hover {
        background-color: rgba(0, 0, 0, 0.8);
    }

    .thumbnails {
        display: flex;
        gap: 10px;
        margin-top: 10px;
        overflow-x: auto;
        padding: 10px 0;
    }

    .thumbnail {
        width: 100px;
        height: 75px;
        object-fit: cover;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.3s;
        border: 2px solid transparent;
    }

    .thumbnail:hover, .thumbnail.active {
        transform: scale(1.05);
        border-color: var(--primary-color);
    }

    .property-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .property-details {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--accent-color);
    }

    .detail-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
    }

    .detail-item {
        margin-bottom: 1rem;
    }

    .detail-label {
        font-weight: 600;
        color: #6c757d;
        display: block;
        margin-bottom: 0.3rem;
    }

    .detail-value {
        color: var(--dark-color);
        font-weight: 500;
    }

    .property-description {
        line-height: 1.7;
        color: #495057;
        margin-top: 1.5rem;
    }

    .property-map {
        height: 400px;
        border-radius: 12px;
        overflow: hidden;
        margin-top: 2rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .amenities {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8rem;
        margin-top: 1.5rem;
    }

    .amenity {
        background: #f1f3f5;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .amenity i {
        color: var(--primary-color);
    }

    .sidebar {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .contact-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }

    .contact-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--dark-color);
    }

    .contact-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .contact-icon {
        width: 40px;
        height: 40px;
        background: var(--light-color);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary-color);
    }

    .contact-btn {
        display: inline-block;
        background: var(--primary-color);
        color: white;
        padding: 0.8rem 1.5rem;
        border-radius: 30px;
        text-align: center;
        width: 100%;
        font-weight: 600;
        margin-top: 1rem;
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .contact-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
        color: white;
    }

    .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    border: 1px solid #e9ecef;
    transition: all 0.3s ease;
}

.meta-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

    @@media (max-width: 992px) {
        .property-content {
            grid-template-columns: 1fr;
        }
        
        .main-image {
            height: 350px;
        }
    }

    @@media (max-width: 768px) {
        .detail-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="property-container">
    <div class="property-header">
        <h1 class="property-title">@Model.Baslik</h1>
        <div class="property-price">@Model.Fiyat.ToString("N0") ₺</div>
        <div class="property-meta">
            <div class="meta-item">
                <i class="fas fa-map-marker-alt"></i>
                <span>@Model.Adres</span>
            </div>
            <div class="meta-item">
                <i class="fas fa-calendar-alt"></i>
                <span>@Model.IlanTarihi.ToString("dd.MM.yyyy")</span>
            </div>
            <div class="meta-item">
                <i class="fas fa-tag"></i>
                <span>@Model.Tip</span>
            </div>
        </div>
    </div>

    <div class="gallery-container">
        @if (Model.Gorseller != null && Model.Gorseller.Any())
        {
            <img src="@Model.Gorseller.First().DosyaYolu" alt="@Model.Baslik" class="main-image" id="mainImage">
            <div class="gallery-nav">
                <button class="nav-btn" id="prevBtn"><i class="fas fa-chevron-left"></i></button>
                <button class="nav-btn" id="nextBtn"><i class="fas fa-chevron-right"></i></button>
            </div>
            
            <div class="thumbnails">
                @foreach (var (image, index) in Model.Gorseller.Select((img, i) => (img, i)))
                {
                    <img src="@image.DosyaYolu" alt="Emlak fotoğrafı" class="thumbnail @(index == 0 ? "active" : "")" data-index="@index">
                }
            </div>
        }
        else
        {
            <img src="/images/no-image.jpg" alt="Fotoğraf yok" class="main-image">
        }
    </div>

    <div class="property-content">
        <div class="property-details">
            <h3 class="section-title">Özellikler</h3>
            <div class="detail-grid">
                <div class="detail-item">
                    <span class="detail-label">Metrekare</span>
                    <span class="detail-value">@Model.Metrekare m²</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Oda Sayısı</span>
                    <span class="detail-value">@Model.OdaSayisi</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Bina Yaşı</span>
                    <span class="detail-value">@Model.BinaYasi yıl</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Kat</span>
                    <span class="detail-value">@Model.BulunduguKat. Kat (@Model.KatSayisi katlı)</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Isıtma Tipi</span>
                    <span class="detail-value">@Model.IsitmaTipi</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Banyo Sayısı</span>
                    <span class="detail-value">@Model.BanyoSayisi</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Eşyalı</span>
                    <span class="detail-value">@(Model.EsyaliMi ? "Evet" : "Hayır")</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Site İçinde</span>
                    <span class="detail-value">@(Model.SiteIciMi ? "Evet" : "Hayır")</span>
                </div>
            
            </div>

            <div class="amenities">
                @if (Model.Balkon)
                {
                    <div class="amenity">
                        <i class="fas fa-umbrella-beach"></i> Balkon
                    </div>
                }
                @if (Model.KrediliMi)
                {
                    <div class="amenity">
                        <i class="fas fa-hand-holding-usd"></i> Krediye Uygun
                    </div>
                }

  <div class="meta-item">
        @{
            var emlakTipiIcon = Model.EmlakTipi switch
            {
                "Daire" => "fa-building",
                "Villa" => "fa-home",
                "Arsa" => "fa-tree",
                "Dükkan" => "fa-store",
                "İşyeri" => "fa-briefcase",
                _ => "fa-home"
            };
        }
        <i class="fas @emlakTipiIcon"></i>
        <span>@Model.EmlakTipi</span>
    </div>
            </div>

            <h3 class="section-title" style="margin-top: 2rem;">Açıklama</h3>
            <div class="property-description">
                @Model.Aciklama
            </div>

            
        </div>

      
    </div>
</div>

@section Scripts {
    <!-- Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap&libraries=places" async defer></script>
    
    <script>
        // Fotoğraf Galerisi
        const images = @Html.Raw(JsonConvert.SerializeObject(Model.Gorseller?.Select(g => g.DosyaYolu) ?? []));
        let currentIndex = 0;
        const mainImage = document.getElementById('mainImage');
        const thumbnails = document.querySelectorAll('.thumbnail');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');

        function updateGallery() {
            if (images.length > 0) {
                mainImage.src = images[currentIndex];
                
                // Thumbnail aktif durumunu güncelle
                thumbnails.forEach((thumb, index) => {
                    thumb.classList.toggle('active', index === currentIndex);
                });
            }
        }

        // Thumbnail tıklamaları
        thumbnails.forEach(thumb => {
            thumb.addEventListener('click', () => {
                currentIndex = parseInt(thumb.dataset.index);
                updateGallery();
            });
        });

        // Önceki/Sonraki butonları
        if (prevBtn && nextBtn) {
            prevBtn.addEventListener('click', () => {
                currentIndex = (currentIndex - 1 + images.length) % images.length;
                updateGallery();
            });

            nextBtn.addEventListener('click', () => {
                currentIndex = (currentIndex + 1) % images.length;
                updateGallery();
            });
        }

        // Klavye ile gezinme
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                currentIndex = (currentIndex - 1 + images.length) % images.length;
                updateGallery();
            } else if (e.key === 'ArrowRight') {
                currentIndex = (currentIndex + 1) % images.length;
                updateGallery();
            }
        });

        // Google Haritalar
        function initMap() {
            @if (Model.Enlem.HasValue && Model.Boylam.HasValue)
            {
                <text>
                const propertyLocation = { lat: @Model.Enlem.Value, lng: @Model.Boylam.Value };
                
                const map = new google.maps.Map(document.getElementById("propertyMap"), {
                    center: propertyLocation,
                    zoom: 15,
                    styles: [
                        {
                            "featureType": "poi",
                            "stylers": [{"visibility": "off"}]
                        },
                        {
                            "featureType": "transit",
                            "stylers": [{"visibility": "off"}]
                        }
                    ]
                });

                // Ana işaretçi
                new google.maps.Marker({
                    position: propertyLocation,
                    map: map,
                    title: "@Model.Baslik",
                    icon: {
                        url: "https://maps.google.com/mapfiles/ms/icons/red-dot.png"
                    }
                });

                // Yakın çevredeki önemli yerler
                const placesService = new google.maps.places.PlacesService(map);
                const request = {
                    location: propertyLocation,
                    radius: '500',
                    type: ['school', 'hospital', 'park', 'shopping_mall', 'train_station', 'pharmacy']
                };

                placesService.nearbySearch(request, (results, status) => {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        results.forEach(place => {
                            new google.maps.Marker({
                                position: place.geometry.location,
                                map: map,
                                title: place.name,
                                icon: {
                                    url: "https://maps.google.com/mapfiles/kml/pal3/icon21.png",
                                    scaledSize: new google.maps.Size(25, 25)
                                }
                            });
                        });
                    }
                });

                // Konum bilgisi için bilgi penceresi
                const infoWindow = new google.maps.InfoWindow({
                    content: `<div style="padding: 10px;">
                                <h3 style="margin: 0 0 5px 0; font-size: 16px;">@Model.Baslik</h3>
                                <p style="margin: 0; font-size: 14px;">@Model.Adres</p>
                              </div>`
                });

                // Haritaya tıklanınca bilgi penceresini aç
                map.addListener('click', () => {
                    infoWindow.open(map);
                });

                // İlk açılışta bilgi penceresini göster
                infoWindow.setPosition(propertyLocation);
                infoWindow.open(map);
                </text>
            }
        }

    </script>
}